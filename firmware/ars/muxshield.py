# Mapping# Name   MuxShield   ESP32    # PINEN     7          14     Mux Enable pin# PINA0     4          17     Mux Address 0 pin# PINA1     5          16     Mux Address 1 pin# PINA2     6          27     Mux Address 2 pin# PINSO     12         19     TCAmp Slave Out pin (MISO)# PINSC     13         18     TCAmp Serial Clock (SCK)# PINCS     9          13     TCAmp Chip Select Change this to match #                             the position of the Chip Select Linkfrom machine import Pin, SPIimport timeclass TMuxShield:    def __init__(self):        # Muxtiplexer Address        self._a0 = Pin(17, Pin.OUT)        self._a1 = Pin(16, Pin.OUT)        self._a2 = Pin(27, Pin.OUT)                # Multiplexer Enable        self._mux_cs = Pin(14, Pin.OUT)        self._mux_cs.on()                # Configure SPI        self._spi = SPI(2, baudrate=12000000, polarity=0, phase=0, bits=8,                        firstbit=SPI.MSB, sck=Pin(18), mosi=Pin(23),                        miso=Pin(19))        self._spi_cs = Pin(13, Pin.OUT)        self._spi_cs.off()            def _select_channel(self, channel):        self._a0.value(channel & 0b001)        self._a1.value(channel & 0b010)        self._a2.value(channel & 0b100)        time.sleep(1e-3)     def _read_raw_channel(self, channel):                self._select_channel(channel)        self._spi_cs.off()        time.sleep(0.01)        self._spi_cs.on()        time.sleep(0.1)        self._spi_cs.off()        time.sleep(1e-3)        raw_data = self._spi.read(4)        time.sleep(1e-3)        return raw_data    def read_temp(self, channel):        """        Method to read the channel temperature.                 Process data bits:        31 -> 18: Thermocouple temperature 31=sign, 30=2^10, 18=2^-2        17: No used        16: Fault        15 -> 4: Internal temperature 15=sign, 14=2^6, 4=2^-4        2: Short to Vcc        1: Short to GND        0: Open circuit        """        raw_data = self._read_raw_channel(channel)        data = int.from_bytes(raw_data, 'big')                      open_circuit = (data & 0x01)         short_gnd = (data & 0x02) >> 1        short_vcc = (data & 0x04) >> 2                tmp = (data & 0xFFF0) >> 4        internal = tmp & 0x07FF        if tmp & 0x0800:            internal *= -1                internal *= 0.0625                 fault = (data & 0x010000) >> 16        tmp = (data & 0xFFFC0000) >> 18        thermocouple = tmp & 0x01FFF        if tmp & 0x2000:            thermocouple *= -1        thermocouple *= 0.25          return thermocouple, internal, fault, short_vcc, short_gnd, \            open_circuit      def print_all(self):        for i in range(8):            print(i, '->', self.read_temp(i))